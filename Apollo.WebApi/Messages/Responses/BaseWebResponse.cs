// ------------------------------------------------------------------------------------------------------------------------
//  Copyright (c) ZoomAudits, LLC.
// 
//  Created By: Tim Vidrine
//  Created On: 04/12/2018
// ------------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Apollo.Core.Base;
using Apollo.Core.Messages.Responses;
using Apollo.WebApi.Contracts;

namespace Apollo.WebApi.Messages.Responses
{
    /// <summary>
    /// Abstract base web response
    /// </summary>
    /// <inheritdoc/>
    public abstract class BaseWebResponse<T> : BaseWebResponse where T : IDto<T>
    {
        /// <inheritdoc />
        /// <summary>
        /// </summary>
        protected BaseWebResponse()
        {
            Content = Activator.CreateInstance<T>();
        }
        
        /// <summary>
        /// The data the request generated
        /// </summary>
        public T Content { get; set; }

        /// <summary>
        /// Populates the web response from a base response
        /// </summary>
        /// <typeparam>
        ///     <name>T</name>
        /// </typeparam>
        /// <typeparam name="TSource"></typeparam>
        /// <param name="source"></param>
        /// <returns></returns>
        public new BaseWebResponse<T> From<TSource>(TSource source) where TSource: IBaseResponse
        {
            var content = source.GetContent();

            if(content != null)
                Content.FromModel(content);

            ((List<Failure>)Errors)
                .AddRange(source.Errors);

            return this;
        }
    }

    /// <summary>
    /// A response generated by a Web API end point
    /// </summary>
    public abstract class BaseWebResponse
    {
        /// <summary>
        /// 
        /// </summary>
        protected BaseWebResponse()
        {
            Errors = new List<Failure>();
        }

        /// <summary>
        /// List of failures generated by the request
        /// </summary>
        public IReadOnlyList<Failure> Errors { get; }
        /// <summary>
        /// The request was successfull handled
        /// </summary>
        public bool IsSuccessful => Errors.Count == 0;

        /// <summary>
        /// Populates the web response from a base response 
        /// </summary>
        /// <typeparam name="TSource"></typeparam>
        /// <param name="source"></param>
        /// <returns></returns>
        public virtual BaseWebResponse From<TSource>(TSource source) where TSource : IBaseResponse
        {
            ((List<Failure>)Errors)
                .AddRange(source.Errors);

            return this;
        }
    }
}